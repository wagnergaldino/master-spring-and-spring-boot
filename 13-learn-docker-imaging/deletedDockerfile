#basic image creation config = build in local machine and copying to docker image:
#FROM openjdk:18.0-jdk-slim
#COPY target/*.jar app.jar
#EXPOSE 7000
#ENTRYPOINT ["java", "-jar", "/app.jar"]
#create image command: sudo docker build -t wagal/hello-world-docker:v1 .
#run image command: sudo docker run -d -p 7000:7000 wagal/hello-world-docker:v1

#------------------------------------------------------------------------------

#image creation in multi stages = build and copying inside docker image
#FROM maven:3.8.6-openjdk-18-slim AS mybuild
#WORKDIR /home/app
#COPY . /home/app
#RUN mvn -f /home/app/pom.xml clean package

#FROM openjdk:18.0-jdk-slim
#VOLUME /tmp
#EXPOSE 8080
#COPY --from=mybuild /home/app/target/*.jar app.jar
#ENTRYPOINT [ "sh", "-c", "java -jar /app.jar" ]
#create image command: sudo docker build -t wagal/hello-world-docker:v2 .
#run image command: sudo docker run -d -p 7000:7000 wagal/hello-world-docker:v2

#-----------------------------------------------------------------------------

#image creation in multi stages using docker layer caching = build and copying inside docker image
FROM maven:3.8.6-openjdk-18-slim AS mybuild
WORKDIR /home/app
COPY ./pom.xml /home/app/pom.xml
COPY ./src/main/java/br/net/galdino/learndockerimaging/Application.java /home/app/src/main/java/br/net/galdino/learndockerimaging/Application.java

RUN mvn -f /home/app/pom.xml clean package

COPY . /home/app
RUN mvn -f /home/app/pom.xml clean package
 
FROM openjdk:18.0-jdk-slim
EXPOSE 7000
COPY --from=mybuild /home/app/target/*.jar app.jar
ENTRYPOINT [ "sh", "-c", "java -jar /app.jar" ]
#create image command: sudo docker build -t wagal/hello-world-docker:v3 .
#run image command: sudo docker run -d -p 7000:7000 wagal/hello-world-docker:v3
